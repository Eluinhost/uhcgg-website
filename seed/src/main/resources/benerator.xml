<?xml version="1.0" encoding="UTF-8"?>
<setup xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://databene.org/benerator/0.9.8"
       xsi:schemaLocation="http://databene.org/benerator/0.9.8 benerator-0.9.8.xsd"
       defaultEncoding="utf-8"
       defaultDataset="GB"
       defaultLocale="en_GB"
       defaultLineSeparator="\r\n">
    <import domains="person, lang" platforms="db"/>
    <import class="org.databene.commons.TimeUtil"/>

    <setting name="user_count" value="150"/>
    <setting name="bans_count" value="35"/>
    <setting name="default_role_id" value="00000000-0000-0000-0000-000000000000"/>
    <setting name="scenario_count" value="100"/>
    <setting name="extra_network_permissions" value="20"/>

    <bean id="yearAgo" spec="TimeUtil.addYears(TimeUtil.today(), -1)"/>
    <bean id="today" spec="TimeUtil.today()"/>
    <bean id="oneYear" spec="TimeUtil.addYears(TimeUtil.today(), 1)"/>

    <bean id="dtGen" class="DateTimeGenerator">
        <property name='minDate' ref='yearAgo'/>
        <property name='maxDate' ref='today'/>
    </bean>

    <bean id="banExpireDtGen" class="DateTimeGenerator">
        <property name='minDate' ref='yearAgo'/>
        <property name='maxDate' ref='oneYear'/>
    </bean>

    <bean id="uuidGen" class="UUIDGenerator"/>

    <bean id="output" class="SQLEntityExporter">
        <property name="encoding" value="utf-8"/>
        <property name="dialect" value="postgres"/>
        <property name="uri" value="seed.sql"/>
    </bean>

    <bean id="passwordConverter" class="gg.uhc.website.seed.BcryptConverter"/>
    <bean id="ipGenerator" class="gg.uhc.website.seed.Ip4AddressGenerator"/>
    <bean id="domainGenerator" class="gg.uhc.website.seed.DomainNameGenerator"/>

    <bean id="serverIdGen" class="IncrementalIdGenerator">
        <property name="initial" value="10000"/>
    </bean>
    <bean id="uniqueServerNounValidator" class="UniqueValidator"/>
    <bean id="uniqueNetworkNounValidator" class="UniqueValidator"/>
    <bean id="uniqueNetworkTagValidator" class="UniqueValidator"/>
    <bean id="uniqueUsernameValidator" class="UniqueValidator"/>

    <memstore id="store"/>

    <!-- generate users -->
    <generate
            type="users"
            count="{user_count}"
            consumer="ConsoleExporter,output,store"
            name="user"
    >
        <variable name="person" generator="PersonGenerator" dataset="US" locale="en_US"/>
        <variable name="userNoun" generator="NounGenerator"/>

        <id name="uuid" generator="uuidGen" unique="true"/>
        <attribute name="username" source="usernames.wgt.csv" validator="uniqueUsernameValidator"/>
        <attribute name="email" source="person.email" unique="true"/>
        <attribute name="password" source="userNoun.singular" converter="passwordConverter"/>
        <attribute name="created" generator="dtGen"/>
        <attribute name="modified" generator="dtGen"/>

        <!-- add the default role to every user -->
        <generate type="user_roles" count="1" consumer="ConsoleExporter,output">
            <reference name="user_id" targetType="users" script="user.uuid"/>
            <attribute name="role_id" type="string" constant="{default_role_id}"/>
        </generate>

        <!-- add some random other roles to every user -->
        <generate type="dummy" name="extra_role_count_dummy" consumer="NoConsumer" count="1">
            <attribute name="count" type="int" source="nonDefaultRolesCount.wgt.csv"/>

            <generate
                    type="user_roles"
                    consumer="ConsoleExporter,output"
                    count="{extra_role_count_dummy.count}"
                    unique="true">
                <reference name="user_id" targetType="users" script="user.uuid"/>
                <attribute name="role_id" type="string" source="nonDefaultRoles.wgt.csv"/>
            </generate>
        </generate>

        <!-- chance to generate a networks per user -->
        <generate type="dummy" name="network_count_dummy" consumer="NoConsumer" count="1">
            <attribute name="count" type="int" source="networkCount.wgt.csv"/>

            <generate
                    type="networks"
                    name="network"
                    count="{network_count_dummy.count}"
                    consumer="ConsoleExporter,store,output">
                <reference name="owner_user_id" targetType="users" script="user.uuid"/>

                <id name="uuid" generator="uuidGen" unique="true"/>
                <attribute name="name" source="networkNames.wgt.csv" validator="uniqueNetworkNounValidator" />
                <attribute name="tag" source="networkTags.wgt.csv" validator="uniqueNetworkTagValidator" />
                <attribute name="description" generator="NounGenerator"/>
                <attribute name="created" generator="dtGen"/>
                <attribute name="modified" generator="dtGen"/> <!-- TODO validate after created -->
                <attribute name="deleted" type="boolean" trueQuota="0.05"/>

                <!-- add the isAdmin permission for the network for this user -->
                <generate
                        type="network_permissions"
                        count="1"
                        consumer="ConsoleExporter,output">
                    <reference name="network_id" targetType="networks" script="network.uuid"/>
                    <reference name="user_id" targetType="users" script="user.uuid"/>

                    <attribute name="is_admin" type="boolean" constant="true"/>
                </generate>

                <!-- each network should have 1-5 servers also owned by this user -->
                <generate
                        type="servers"
                        minCount="1"
                        maxCount="5"
                        consumer="ConsoleExporter,store,output">
                    <reference name="network_id" targetType="networks" script="network.uuid"/>
                    <reference name="owner_user_id" targetType="users" script="user.uuid"/>
                    <variable name="serverNoun" generator="NounGenerator" validator="uniqueServerNounValidator"/>

                    <id name="uuid" generator="uuidGen" unique="true"/>
                    <attribute name="name" source="serverNoun.singular"/>
                    <attribute name="address" generator="domainGenerator"/>
                    <attribute name="ip" generator="ipGenerator"/>
                    <attribute name="port" type="int" min="1" max="65565"/>
                    <attribute name="location" generator="NounGenerator"/>
                    <attribute name="region_id" type="string" source="regions.wgt.csv" distribution="random"/>
                    <attribute name="created" generator="dtGen"/>
                    <attribute name="modified" generator="dtGen"/> <!-- TODO validate after created -->
                    <attribute name="deleted" type="boolean" trueQuota="0.05"/>
                </generate>
            </generate>
        </generate>

    </generate>

    <!-- add some random bans -->
    <generate
            type="bans"
            count="{bans_count}"
            consumer="ConsoleExporter,output">
        <variable name="user" source="store" type="users" distribution="random"/>
        <!-- choose an author that isn't the same user -->
        <variable name="author" source="store" type="users" distribution="random"
                  selector="!_candidate.uuid.equals(user.uuid)"/>

        <reference name="banned_user_id" targetType="users" script="user.uuid"/>
        <reference name="author_user_id" targetType="users" script="author.uuid"/>
        <attribute name="reason" generator="NounGenerator"/>
        <attribute name="created" generator="dtGen"/>
        <attribute name="modified" generator="dtGen"/>
        <attribute name="expires" generator="banExpireDtGen"/> <!-- TODO validate expires after created -->
    </generate>

    <!-- generate random scenarios linked to random users -->
    <generate
            type="scenarios"
            count="{scenario_count}"
            consumer="ConsoleExporter,output,store">
        <variable name="owner" source="store" type="users" distribution="random"/>
        <variable name="name" generator="NounGenerator" validator="UniqueValidator"/>

        <id name="uuid" generator="uuidGen" unique="true"/>
        <attribute name="name" source="scenarioNames.wgt.csv" validator="uniqueUsernameValidator"/>
        <attribute name="description" script="name.singular"/>
        <attribute name="created" generator="dtGen"/>
        <attribute name="modified" generator="dtGen"/>
        <attribute name="deleted" type="boolean" trueQuota="0.1"/>
        <reference name="owner_user_id" targetType="users" script="owner.uuid"/>
    </generate>

    <iterate source="store" type="networks" name="network" consumer="NoConsumer">
        <!-- Add extra permissions (non-owner) -->
        <generate type="dummy" count="1" consumer="NoConsumer" name="network_permission_count_dummy">
            <attribute name="count" type="int" source="extraNetworkPermissionCount.wgt.csv"/>

            <generate
                    type="network_permissions"
                    count="{network_permission_count_dummy.count}"
                    consumer="ConsoleExporter,output">
                <variable name="user" source="store" type="users" distribution="random" unique="true"
                          selector="!_candidate.uuid.equals(network.owner_user_id)"/>

                <reference name="network_id" targetType="networks" script="network.uuid"/>
                <reference name="user_id" targetType="users" script="user.uuid"/>
                <attribute name="is_admin" type="boolean" trueQuota="0.1"/>
            </generate>
        </generate>

        <!-- add up to 2 extra servers to the network owned by other users -->
        <generate
                type="servers"
                minCount="0"
                maxCount="2"
                consumer="ConsoleExporter,output,store">
            <variable name="user" source="store" type="users" distribution="random"
                      selector="!_candidate.uuid.equals(network.owner_user_id)"/>

            <reference name="network_id" targetType="networks" script="network.uuid"/>
            <reference name="owner_user_id" targetType="users" script="user.uuid"/>
            <variable name="serverNoun" generator="NounGenerator" validator="uniqueServerNounValidator"/>

            <id name="uuid" generator="uuidGen" unique="true"/>
            <attribute name="name" source="serverNoun.singular"/>
            <attribute name="address" generator="domainGenerator"/>
            <attribute name="ip" generator="ipGenerator"/>
            <attribute name="port" type="int" min="1" max="65565"/>
            <attribute name="location" generator="NounGenerator"/>
            <attribute name="region_id" type="string" source="regions.wgt.csv" distribution="random"/>
            <attribute name="created" generator="dtGen"/>
            <attribute name="modified" generator="dtGen"/> <!-- TODO validate after created -->
            <attribute name="deleted" type="boolean" trueQuota="0.05"/>
        </generate>
    </iterate>

    <generate
            type="matches"
            name="match"
            minCount="150"
            maxCount="200"
            consumer="ConsoleExporter,output">
        <variable name="server" source="store" type="servers" distribution="random"/>

        <id name="uuid" generator="uuidGen" unique="true"/>
        <attribute name="host_user_id" script="server.owner_user_id"/>
        <attribute name="server_id" script="server.uuid"/>
        <attribute name="version_id" source="versions.wgt.csv"/>
        <attribute name="style_id" source="styles.wgt.csv"/>
        <attribute name="size" type="int" min="3" max="12"/> <!-- TODO technically not needed for all styles -->
        <attribute name="created" generator="dtGen"/>
        <attribute name="modified" generator="dtGen"/> <!-- TODO validate after created -->
        <attribute name="deleted" type="boolean" trueQuota="0.05"/>
        <attribute name="starts" generator="dtGen"/> <!-- TODO makes some past and some future -->

        <generate
                type="match_scenarios"
                minCount="1"
                maxCount="10"
                consumer="ConsoleExporter,output">
            <variable name="scenario" source="store" type="scenarios" distribution="random" unique="true"/>

            <attribute name="match_id" script="match.uuid"/>
            <attribute name="scenario_id" script="scenario.uuid"/>
        </generate>
    </generate>
</setup>